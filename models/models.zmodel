generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id               String            @id @default(uuid())
    name             String?
    email            String?           @unique
    pictureUrl       String?           @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation  String?

    status           UserStatus        @default(VERIFIED)

    // this is the role of the user for the application
    globalRole       String            @default('USER')
    password         String?           @password @omit
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt @default(now())

    pwaSubscriptions PwaSubscription[] @relation("user")

    teamMembers      TeamMember[]      @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Supplier {

    id        String     @id @default(uuid())
    name      String
    email     String?
    phone     String?
    address   String?

    materials Material[] @relation("supplier")
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt @default(now())
    @@allow("all", true)
}

model Material {

    id             String          @id @default(uuid())
    name           String
    description    String?
    specifications String?
    criticalFlag   Boolean

    supplierId     String?
    supplier       Supplier?       @relation(fields: [supplierId], references: [id], name: "supplier")

    materialOrders MaterialOrder[] @relation("material")
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt @default(now())
    @@allow("all", true)
}

model Customer {

    id        String   @id @default(uuid())
    name      String
    email     String?
    phone     String?
    address   String?
    notes     String?

    jobs      Job[]    @relation("customer")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Team {

    id          String       @id @default(uuid())
    name        String
    description String?

    teamMembers TeamMember[] @relation("team")
    jobTeams    JobTeam[]    @relation("team")
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt @default(now())
    @@allow("all", true)
}

model TeamMember {

    id        String   @id @default(uuid())
    role      String?
    skills    String?

    userId    String?
    user      User?    @relation(fields: [userId], references: [id], name: "user")
    teamId    String?
    team      Team?    @relation(fields: [teamId], references: [id], name: "team")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Job {

    id             String          @id @default(uuid())
    title          String
    description    String?
    status         String?
    priority       String?
    startDate      String?
    endDate        String?

    customerId     String?
    customer       Customer?       @relation(fields: [customerId], references: [id], name: "customer")

    jobTeams       JobTeam[]       @relation("job")
    jobSheets      JobSheet[]      @relation("job")
    materialOrders MaterialOrder[] @relation("job")
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt @default(now())
    @@allow("all", true)
}

model JobTeam {

    jobId     String?
    job       Job?     @relation(fields: [jobId], references: [id], name: "job")
    teamId    String?
    team      Team?    @relation(fields: [teamId], references: [id], name: "team")
    id        String   @id @default(uuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model JobSheet {

    id           String   @id @default(uuid())
    type         String?
    measurements String?
    details      String?
    imageUrl     String?

    jobId        String?
    job          Job?     @relation(fields: [jobId], references: [id], name: "job")

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model MaterialOrder {

    id           String    @id @default(uuid())
    quantity     Float?
    status       String?
    deliveryDate String?

    jobId        String?
    job          Job?      @relation(fields: [jobId], references: [id], name: "job")
    materialId   String?
    material     Material? @relation(fields: [materialId], references: [id], name: "material")

    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt @default(now())
    @@allow("all", true)
}

model PwaSubscription {
    id        String   @id @default(uuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    userId    String   @default(auth().id)
    user      User     @relation(fields: [userId], references: [id], name: 'user')

    @@allow("all", true)
}

      